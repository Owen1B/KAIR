{
  //-----------------全局设置---------------------
  "task": "drunet_pll_8x_linear_96数据集",  // 名称
  "model": "plain",                     // 模型类型："plain"｜"gan"
  "gpu_ids": [0],                       // 使用GPU ID
  "scale": 1,                           // 放大倍数，SPECT降噪设为1即可
  "n_channels": 2,                      // 输入通道数，2表示前后位
  "speed": 8,                           // 快速扫描倍数，4表示25%剂量扫描，用于生成低计数图像
  "normalization": {
    "type": "linear",                 // 归一化方式："linear" | "anscombe" | "log"
    "max_pixel": 150
  },
  //-----------------路径设置---------------------
  "path": {
    "root": "SPECTdenoising",           // 保存路径
    "pretrained_netG": null             // 预训练模型的路径
  },
  //-----------------wandb设置---------------------
  "wandb" : {
    "entity":"owen1b_",
    "project": "bsd3",
    "group": "drunet_pll"
  },
  //-----------------数据集设置---------------------
  "datasets": {
    "train": {
      "name": "train_dataset",          // 仅作为名称
      "dataset_type": "spect",          // SPECT专用dataset
      "dataroot_H": "SPECTdatasets/spectH_XCAT_poisson_1x", // 训练数据集H的路径
      "dataroot_L": "SPECTdatasets/spectL_XCAT_binomial_8x", // 训练数据集L的路径
      "start_index": 0,
      "end_index": 96,
      "H_size": 128,                    // 图像块大小：40 | 64 | 96 | 128 | 192
      "is_ideal_H": true,              // 是否为理想图
      "use_binomial_resampling": true, // 是否使用二项重采样
      "dataloader_shuffle": true,       // 是否打乱数据集
      "dataloader_num_workers": 8,      // 数据加载器的工作线程数
      "dataloader_batch_size": 16       // 批量大小：1 | 16 | 32 | 48 | 64 | 128
    },
    "test": {
      "name": "test_dataset",           // 仅作为名称
      "dataset_type": "spect",          // SPECT专用dataset
      "dataroot_H": "SPECTdatasets/spectH_XCAT_ideal_1x",  // 测试数据集H的路径
      "dataroot_L": "SPECTdatasets/spectL_XCAT_binomial_8x",              // 测试数据集L的路径
      "start_index": 96,
      "end_index": 100
    },
    "val_1": {
      "name": "val_dataset_1",           // 仅作为名称
      "dataset_type": "spect",          // SPECT专用dataset
      "dataroot_H": "SPECTdatasets/spectH_clinical",  // 验证数据集1的H路径
      "dataroot_L": "SPECTdatasets/spectL_clinical_binomial_8x",              // 验证数据集1的L路径
      "start_index": 0,
      "end_index": 5
    },
    "val_2": {
      "name": "val_dataset_2",           // 仅作为名称
      "dataset_type": "spect",          // SPECT专用dataset
      "dataroot_H": "SPECTdatasets/spectH_XCAT_poisson_1x",  // 验证数据集2的H路径
      "dataroot_L": "SPECTdatasets/spectL_XCAT_binomial_8x",              // 验证数据集2的L路径
      "start_index": 96,
      "end_index": 100,
      "lpips_local_repeat_n": 10
    }
  },
  //-----------------网络设置---------------------
  "netG": {
    "net_type": "drunet",               // "dncnn" | "fdncnn" | "ffdnet" | "srmd" | "dpsr" | "srresnet0" |  "srresnet1" | "rrdbnet" | "drunet"
    "in_nc": 2,                         // 输入通道数
    "out_nc": 2,                        // 输出通道数
    "nc": [64, 128, 256, 512],          // 网络中间层的特征通道数
    "nb": 4,                            // 表示每个下采样/上采样阶段的残差块数量
    "act_mode": "R",                    // "BR"表示BN+ReLU | "R"表示ReLU
    "upsample_mode": "convtranspose",   // "pixelshuffle" | "convtranspose" | "upconv"
    "downsample_mode": "strideconv",    // "strideconv" | "avgpool" | "maxpool"
    "bias": false,                      // 是否使用偏置
    "init_type": "orthogonal",          // 初始化方式
    "init_bn_type": "uniform",          // 初始化BN层
    "init_gain": 0.2                    // 初始化增益
  },
  //-----------------训练设置---------------------
  "train": {
    "lpips_net": "alex",
    "manual_seed": 20020113,            // 随机种子
    "G_lossfn_type": "poisson",         // 使用泊松对数似然损失
    "G_lossfn_weight": 1.0,             // 默认值
    
    // PLL损失函数的特定参数
    "G_poisson_normalization_method": "linear",  // 归一化方法，与全局设置保持一致
    "G_poisson_max_pixel": 150.0,               // 最大像素值，与全局设置保持一致
    "G_poisson_epsilon": 1e-9,                  // 数值稳定性参数
   
    "E_decay": 0.999,                             // 指数滑动平均，设为0表示不使用，默认0.999

    "G_optimizer_type": "adam",         // 优化器类型："adam"
    "G_optimizer_lr": 5e-5,             // 学习率
    "G_optimizer_wd": 0,                // 权重衰减，默认0
    "G_optimizer_clipgrad": null,       // 梯度裁剪
    "G_optimizer_reuse": true,          // 是否重用优化器状态（从之前的检查点加载）

    "G_scheduler_type": "MultiStepLR",  // 学习率调度器类型："MultiStepLR" | "CosineAnnealingLR"
    "G_scheduler_milestones_percent": [0.4, 0.6, 0.8, 0.9], // 新的：学习率下降的里程碑（占总迭代次数的百分比）
    "G_scheduler_gamma": 0.5,           // 学习率衰减系数，每到达一个里程碑，学习率乘以该系数

    "G_regularizer_orthstep": null,     // 正交正则化步长，用于控制网络权重正交性，防止过拟合，null表示不使用
    "G_regularizer_clipstep": null,     // 权重裁剪步长，用于限制网络权重大小，防止梯度爆炸，null表示不使用

    "checkpoint_print": 10,             // 打印损失间隔
    "checkpoint_test": 2000,             // 验证指标间隔
    "checkpoint_save": 2000,            // 保存模型间隔
    "max_epoch": 10000                    // 最大训练轮次 (epoch)
  }
} 